---------------------------------------------------------------------------------
-- Univ. of Chicago  
--    --KICP--
--
-- PROJECT:      phased-array trigger board
-- FILE:         progreset.vhd
-- AUTHOR:       e.oberla
-- EMAIL         ejo@uchicago.edu
-- DATE:         1/2016
--
-- DESCRIPTION:  global resets
--               a numver of typical firmware 'good design techniques' are 
--               abandoned here due to the nature of asynch resets
---------------------------------------------------------------------------------

library IEEE;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity progreset is
	Port(
		CLK		:	in		std_logic;  --1 MHz from FPGA PLL
		CLK_RDY	:	in		std_logic;  --FPGA pll lock signal
		WAKEUP	:	in		std_logic;	--user input, rising edge
		Reset		:	out	std_logic;	--active hi
		Reset_b	:	out	std_logic); --active lo
end progreset;

architecture Behavioral of progreset is

	type 		RESET_STATE is (CLEAR, READY);
	signal	xPOWER_UP		:	RESET_STATE := CLEAR;
	signal	xSIG_RESTART	:	RESET_STATE;
	
	signal	xSTARTUP_COUNT	:	std_logic_vector(15 downto 0) := (others=>'0');
	signal	xRESET_PWR		:	std_logic := '1';
	signal	xRESET_SIG		:	std_logic_vector(2 downto 0) 	:= (others=>'0');
	
begin

	Reset  <= xRESET_PWR or xRESET_SIG(2);
	Reset_b<= not(xRESET_PWR or xRESET_SIG(2));
	--
	proc_pwrup_reset : process(CLK, CLK_RDY, xSTARTUP_COUNT)
	begin

		if rising_edge(CLK) then --and CLK_RDY = '1' then
			case xPOWER_UP is
				when CLEAR =>
					xRESET_PWR <= '1';
					
					if xSTARTUP_COUNT >= x"0FFF0" then -- ~65.5 ms on 1 MHz clock
						xPOWER_UP <= READY;
					else
						xSTARTUP_COUNT <= xSTARTUP_COUNT + 1;
						xPOWER_UP <= CLEAR;
					end if;
					
				when READY =>
					xRESET_PWR <= '0';
				
				when others=>
					xRESET_PWR <= '0';
			end case;
		end if;
	end process;

	--user-provided reset:
	--xRESET_SIG(0) => de-asserts (1), set active 1-clock cycle after (2) 
	--xRESET_SIG(1) => signal latched on user input
	--xRESET_SIG(2) => registered reset signal
	proc_latch_user : process(CLK, WAKEUP)
	begin
		if xRESET_SIG(0) = '1' or xRESET_PWR = '1' then
			xRESET_SIG(1) <= '0';
		elsif rising_edge(WAKEUP) then --latch on user-provided signal
			xRESET_SIG(1) <= '1';		
		end if;
	end process;
	
	
	proc_user_reset : process(CLK, xRESET_SIG(1))
	variable i : integer range 100010 downto 0 := 0;	
	begin
		if xRESET_SIG(1) = '0' then
			xRESET_SIG(2) 	<= '0';
			xRESET_SIG(0) 	<= '0';
			i := 0;
			xSIG_RESTART	<= CLEAR;
		elsif rising_edge(CLK) and xRESET_SIG(1) = '1' then
			case xSIG_RESTART is
				when CLEAR =>
					if i > 100000 then
						i := 0;
						xRESET_SIG(2) <= '0';
						xSIG_RESTART  <= READY;
					else
						i := i + 1;
						xRESET_SIG(2) <= '1';
					end if;
					
				when READY =>
					xRESET_SIG(0) <= '1';
					
				when others =>
					Null;
					
			end case;
		end if;
	end process;
	
end Behavioral;

